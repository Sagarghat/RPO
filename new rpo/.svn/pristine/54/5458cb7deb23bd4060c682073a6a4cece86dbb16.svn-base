package com.ojas.rpo.security.dao.feature;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.springframework.transaction.annotation.Transactional;

import com.ojas.rpo.security.dao.JpaDao;
import com.ojas.rpo.security.entity.Certificate;
import com.ojas.rpo.security.entity.Feature;
import com.ojas.rpo.security.util.FeatureSearch;


public class JpaFeatureDao extends JpaDao<Feature, Long> implements FeatureDao {

	public JpaFeatureDao() {
		super(Feature.class);
	}

	@Override
    @Transactional
    public Feature save(Feature entity)
    {
        return this.getEntityManager().merge(entity);
    }

	@Override
	public List<Feature> findAll(Integer startingRow, Integer pageSize) {
		final CriteriaBuilder builder = this.getEntityManager().getCriteriaBuilder();
		final CriteriaQuery<Feature> criteriaQuery = builder.createQuery(Feature.class);

		Root<Feature> root = criteriaQuery.from(Feature.class);

		TypedQuery<Feature> typedQuery = this.getEntityManager().createQuery(criteriaQuery);
		typedQuery.setFirstResult(startingRow).setMaxResults(pageSize).getResultList().toString();
		return typedQuery.getResultList();
	}
	@Override
	public List<Feature> getFeaturesByRole(FeatureSearch fearchSearch) {
		List<Object[]> featureList = null;
		Query query = null;
		Feature feature = null;
		StringBuilder sql = new StringBuilder();
		List<Feature>  list =new ArrayList<Feature>();
		if(fearchSearch.getRole().equalsIgnoreCase("SUPERADMIN") || fearchSearch.getRole().equalsIgnoreCase("ADMIN")) {
			sql.append(" select f.id,f.featureName from feature f ");
			
		}else {
			sql.append(" select f.id,f.featureName from feature f inner join userfeatures u on f.id = u.featureId "
					+ " inner join user usr on usr.id=u.userId where usr.id="+fearchSearch.getUserId()
					+ " and usr.reg_id="+fearchSearch.getRegId());
		}
		try {
			query = getEntityManager().createNativeQuery(sql.toString());			
			featureList = query.getResultList();
			for (Object[] objects : featureList) {
				feature = new Feature();
				if (objects[0] != null)
					feature.setId(Long.valueOf(objects[0] + ""));
				if (objects[1] != null)
					feature.setFeatureName(String.valueOf(objects[1] + ""));
				list.add(feature);
			}
		} catch (Exception e) {

		}
		return list;
	}
}
