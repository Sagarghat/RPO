package com.ojas.rpo.security.rest.resources;

import java.io.IOException;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import org.json.simple.parser.ParseException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.ResponseBody;

import com.itextpdf.text.pdf.PdfStructTreeController.returnType;
import com.ojas.rpo.security.dao.feature.FeatureDao;
import com.ojas.rpo.security.entity.ExceptionMessage;
import com.ojas.rpo.security.entity.Feature;
import com.ojas.rpo.security.entity.Response;
import com.ojas.rpo.security.util.FeatureSearch;

@Component
@Path("/featureResource")
public class FeatureResource {

	@Autowired

	private FeatureDao featureDao;

	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	@Path("{id}")
	public @ResponseBody Response update(@PathParam("id") Long id, Feature feature) {
		System.out.println("==========inside post method====RPO");
		feature.setId(id);
		Response response = null;
		if (feature.getId() == null || feature.getFeatureName().trim().isEmpty()) {
			response = new Response(ExceptionMessage.DataIsEmpty);
			response.setRes("Invalid feature id");
		} else {
			try {
				feature = this.featureDao.save(feature);
				return new Response(ExceptionMessage.StatusSuccess, feature);
			} catch (Exception e) {
				return new Response(ExceptionMessage.DuplicateRecord);
			}
		}

		return response;
	}

	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public @ResponseBody Response create(Feature feature) {
		if (feature != null && !feature.getFeatureName().trim().isEmpty()) {
			try {
				Feature features = this.featureDao.save(feature);
				return new Response(ExceptionMessage.StatusSuccess, features);

			} catch (Exception e) {
				return new Response(ExceptionMessage.DuplicateRecord);
			}
		} else
			return new Response(ExceptionMessage.DataIsEmpty);
	}

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("{id}")
	public @ResponseBody Response read(@PathParam("id") Long id) {

		Feature feature = this.featureDao.find(id);
		if (feature == null) {
			return new Response(ExceptionMessage.ExcepcetdDataNotAvilable);
		} else
			return new Response(ExceptionMessage.StatusSuccess, feature);
	}

	@GET
	@Path("/getAll/{pageNo}/{pageSize}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getAll(@PathParam("pageNo") Integer pageNo, @PathParam("pageSize") Integer pageSize) {
		Response response = null;
		Integer totalRecords = 0;
		Integer startingRow = 0;
		
		if (pageNo == 1) {
			startingRow = 0;
		} else {
			startingRow = ((pageNo - 1) * pageSize);
		}
		
		List<Feature> list = featureDao.findAll(startingRow, pageSize);
		if (list == null || list.isEmpty()) {
			response = new Response(ExceptionMessage.DataIsEmpty);
		}
		totalRecords = featureDao.findAll().size();
		Integer totalPages = 1;
		if (totalRecords == 0) {
			response = new Response();
			response.setTotalPages(0);
		} else {
			totalPages = totalRecords / pageSize;
			totalPages = (totalRecords % pageSize > 0) ? totalPages + 1 : totalPages;
		}
		response = new Response(ExceptionMessage.StatusSuccess);
		response.setTotalPages(totalPages);
		response.setTotalRecords(totalRecords);
		response.setResult(list);
		return response;

	}
	
	@POST
	@Path("/featuresbyrole")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)	
	public Response getFeaturesByRole(FeatureSearch fearchSearch ) {
		Response response = null;
		List<Feature> list = featureDao.getFeaturesByRole(fearchSearch);
		if(list.isEmpty() || list == null) {
			response = new Response(ExceptionMessage.DataIsEmpty);
		}else {
			response = new Response(ExceptionMessage.StatusSuccess,list);
		}
		return response;
	}
	

}
