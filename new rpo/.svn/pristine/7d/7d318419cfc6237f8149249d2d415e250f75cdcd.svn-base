package com.ojas.rpo.security.dao.plans;

import java.util.List;

import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.springframework.transaction.annotation.Transactional;

import com.ojas.rpo.security.dao.JpaDao;
import com.ojas.rpo.security.entity.Plans;
import com.ojas.rpo.security.entity.PlansVO;



public class JpaPlansDAOImpl extends JpaDao<Plans, Long> implements PlansDAO {

	public JpaPlansDAOImpl() {
		super(Plans.class);
		// TODO Auto-generated constructor stub
	}

	@Override
	@Transactional(readOnly = true)
	public List<Plans> findAllPlans(Integer startingRow, Integer pagesize) {
		final CriteriaBuilder builder = this.getEntityManager().getCriteriaBuilder();
		final CriteriaQuery<Plans> criteriaQuery = builder.createQuery(Plans.class);

		Root<Plans> root = criteriaQuery.from(Plans.class);
		criteriaQuery.orderBy(builder.asc(root.get("planId")));

		TypedQuery<Plans> typedQuery = this.getEntityManager().createQuery(criteriaQuery);
		typedQuery.setFirstResult(startingRow).setMaxResults(pagesize).getResultList().toString();
		return typedQuery.getResultList();
	}
	
	@Override
	@Transactional(readOnly = true)
	public PlansVO findPlanById(Long regisrtationId) {
		PlansVO plans = null;
		Query query = null;		
		query = getEntityManager()
					.createNativeQuery(" select c.reg_id,c.plan_id , p.no_of_cvs,p.no_of_users,p.plan_type,p.price from company_reg c join plans p on c.plan_id = p.plan_id where c.reg_id="+regisrtationId );
		
		List<Object[]> results = query.getResultList();
		for(Object[] p : results){
			plans = new PlansVO();
			plans.setPlanId(Long.valueOf(p[0].toString()));
			plans.setNoOfEmails(Long.valueOf(p[1].toString()));
			plans.setNoOfUsers(Long.valueOf(p[2].toString()));
			plans.setTalentFlag(Integer.parseInt(p[3].toString()));
			plans.setPlanType(p[4].toString());
			
			plans.setPrice(Double.valueOf(p[5].toString()));
		}

		return plans;
	}

}
